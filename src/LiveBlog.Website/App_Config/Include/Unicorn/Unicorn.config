<!--
	Unicorn.config

	This file configures the Unicorn serialization system, which enables automatic synchronization of Sitecore items
	without packages or manual merging.
	
	This file should be present on all environments Unicorn is present on. It is safe to leave on Content Delivery servers, as it changes no stock Sitecore configuration.
	
	http://github.com/kamsar/Unicorn
-->
<configuration xmlns:patch="http://www.sitecore.net/xmlconfig/">
	<sitecore>
		<unicorn>
			<!-- 
				Configurations
				
				These define sets  of configuration that Unicorn can run. For example, you might want to serialize
				certain items differently, or segregate configurations so that critical ones can run separately
				from non-essential ones to save time.
				
				See the README here for more information:
				https://github.com/kamsar/Unicorn/blob/master/README.md
				
				If you're familiar with DI and IoC containers, each configuration is effectively a dependency container which inherits from the global container.
				
				Each dependency type can have non-DI constructor params passed to it by adding XML attributes to the
				main declaration - e.g. <foo type="..." bar="hello"> would pass "hello" to public MyType(string bar)
				
				You can also receive any XML body passed to the dependency to a 'configNode' XmlElement parameter.
				This is how the SerializationPresetPredicate defines its preset.
			-->
			<configurations>
				<configuration name="Default Configuration">
					<!-- 
						The target data store is where we write serialized items to.
					
						Note the target data store's rootPath can be any of:
						Absolute filesystem path, e.g. c:\foo\bar
						Web-root-relative path, e.g. ~/data/serialization or ~/../out-of-root-serialization
						Data-folder-relative path, e.g. $(dataFolder)\serializedItems
						DO NOT SHARE A ROOT PATH BETWEEN CONFIGURATIONS (at least if you're using SFS). They can clobber each other's folders.
					
						The data cache uses a memory cache to store serialized items read from disk. It is recommended to be used if using transparent syncing for performance.
					-->
					<targetDataStore type="Rainbow.Storage.SerializationFileSystemDataStore, Rainbow" physicalRootPath="C:\Projects\sitecore-live-blog\src\Unicorn\Default Configuration" useDataCache="false" singleInstance="true"/>
					<predicate type="Unicorn.Predicates.SerializationPresetPredicate, Unicorn" singleInstance="true">
						<!--
							Each include can also exclude specific subitems by path:
							<exclude path="/sitecore/content"/>
							
							NOTE: after changing what is included or excluded, you should reserialize all items, or at least the added items
						-->
						<!--<include database="core" path="/sitecore/system/Field types"/>
						<include database="core" path="/sitecore/system/Settings" />
						<include database="core" path="/sitecore/content/Documents and settings/All users"/>
						<include database="core" path="/sitecore/content/Applications"/>-->
						<include database="master" path="/sitecore/layout">
							<exclude path="/sitecore/layout/Simulators" />
							<exclude path="/sitecore/layout/Layouts/System" />
							<exclude path="/sitecore/layout/Renderings/App Center Sync" />
							<exclude path="/sitecore/layout/Renderings/System" />
							<exclude path="/sitecore/layout/Renderings/Social MVC" />
							<exclude path="/sitecore/layout/Sublayouts/App Center Sync" />
							<exclude path="/sitecore/layout/Sublayouts/Social" />
							<exclude path="/sitecore/layout/Placeholder Settings/App Center Sync" />
						</include>
						<include database="master" path="/sitecore/system">
							<exclude path="/sitecore/system/Aliases"/>
							<exclude path="/sitecore/system/Marketing Center"/>
							<exclude path="/sitecore/system/Publishing targets" />
							<exclude path="/sitecore/system/Modules/Web Forms for Marketers/Website" />
							<exclude path="/sitecore/system/Modules/Web Forms for Marketers/Local Forms" />
							<exclude path="/sitecore/system/Modules/Web Forms for Marketers/Sample forms" />
							<exclude path="/sitecore/system/Modules/Azure" />
							<exclude path="/sitecore/system/Aliases" />
							<exclude path="/sitecore/system/Tasks/Schedules" />
							<exclude path="/sitecore/system/Modules/PowerShell/Settings/ISE/sitecore" />
						</include>
						<include database="master" path="/sitecore/templates">
							<exclude path="/sitecore/templates/System"/>
							<exclude path="/sitecore/templates/App Center Sync"/>
							<exclude path="/sitecore/templates/List Manager"/>
							<exclude path="/sitecore/templates/Branches/System"/>
						</include>
					</predicate>
				</configuration>
				<!-- 
					You can define additional <configuration>s here to account for different serialization needs.
					Each configuration can override the default dependencies listed below in <defaults> to customize
					its behaviours.
					
					A common use case might be to have a configuration for each site, or to separate test content from templates.
					Configurations may be synced and reserialized separately.
				-->
			</configurations>

			<!-- 
				These are the default Unicorn dependency configurations. These affect all configurations,
				unless specifically overridden in the configuration definition.
			-->
			<defaults>
				<!-- The source data store is where we read data from. Usually, this would be Sitecore. -->
				<sourceDataStore type="Rainbow.Storage.Sc.SitecoreDataStore, Rainbow.Storage.Sc" singleInstance="true"/>
				
				<serializationFormatter type="Rainbow.Storage.Yaml.YamlSerializationFormatter, Rainbow.Storage.Yaml" singleInstance="true">
					<fieldFormatter type="Rainbow.Formatting.FieldFormatters.MultilistFormatter, Rainbow" />
					<fieldFormatter type="Rainbow.Formatting.FieldFormatters.XmlFieldFormatter, Rainbow" />
				</serializationFormatter>
						
				<deserializer type="Rainbow.Storage.Sc.Deserialization.DefaultDeserializer, Rainbow.Storage.Sc" singleInstance="true" />
					<deserializerLogger type="Unicorn.Deserialization.DefaultDeserializerLogger, Unicorn" singleInstance="true"/>

				<evaluator type="Unicorn.Evaluators.SerializedAsMasterEvaluator, Unicorn" singleInstance="true"/>
				  <evaluatorLogger type="Unicorn.Evaluators.DefaultSerializedAsMasterEvaluatorLogger, Unicorn" singleInstance="true"/>

				<!-- The ItemComparer handles comparing items for the Evaluator and SerializationConflictProcessor -->
				<itemComparer type="Rainbow.Diff.ItemComparer, Rainbow" singleInstance="true">
					<!-- 
					  You may add your own field comparisons here to determine equality - they are evaluated in order and the first one to say it can compare gets the job.
					  Note: the DefaultComparison, which does a string Equals() comparison, is automatically registered last and does not need to appear here.
					-->
					<fieldComparer type="Rainbow.Diff.Fields.XmlComparison, Rainbow" />
					<fieldComparer type="Rainbow.Diff.Fields.MultiLineTextComparison, Rainbow" />
				</itemComparer>

				<!-- there is no default predicate, because this must be configured for each configuration -->
				<predicate type="null"/>

				<!-- 
					The field filter can be used to ignore fields when comparing or serializing (i.e. don't write them to disk). 
					Commonly, metadata fields such as Last Updated will be ignored to prevent SCM conflicts. 
				-->
				<fieldFilter type="Rainbow.Filtering.ConfigurationFieldFilter, Rainbow" singleInstance="true">
					<exclude fieldID="{B1E16562-F3F9-4DDD-84CA-6E099950ECC0}" note="'Last run' field on Schedule template (used to register tasks)" />
					<exclude fieldID="{F6D8A61C-2F84-4401-BD24-52D2068172BC}" note="'__Originator' field on Standard Template" />
					<exclude fieldID="{8CDC337E-A112-42FB-BBB4-4143751E123F}" note="'__Revision' field on Standard Template" />
					<exclude fieldID="{D9CF14B1-FA16-4BA6-9288-E8A174D4D522}" note="'__Updated' field on Standard Template" />
					<exclude fieldID="{BADD9CF9-53E0-4D0C-BCC0-2D784C282F6A}" note="'__Updated by' field on Standard Template" />
				</fieldFilter>

				<!-- note that the DebugSerializationLoaderLogger is also available if you want more detailed logging and timing information -->
				<loaderLogger type="Unicorn.Loader.DefaultSerializationLoaderLogger, Unicorn" singleInstance="true"/>

				<loaderConsistencyChecker type="Unicorn.Loader.DuplicateIdConsistencyChecker, Unicorn"/>
				<loaderConsistencyCheckerLogger type="Unicorn.Loader.DefaultDuplicateIdConsistencyCheckerLogger, Unicorn" singleInstance="false"/>

				<loaderDeserializeFailureRetryer type="Unicorn.Loader.DeserializeFailureRetryer, Unicorn" singleInstance="false"/>

				<dataProviderConfiguration type="Unicorn.Data.DataProvider.DefaultUnicornDataProviderConfiguration, Unicorn" enableTransparentSync="false" />
				<dataProviderLogger type="Unicorn.Data.DataProvider.DefaultUnicornDataProviderLogger, Unicorn" singleInstance="true"/>

				<logger type="Unicorn.Logging.PubSubLogger, Unicorn" singleInstance="true" />

				<syncCompleteDataCollector type="Unicorn.Pipelines.UnicornSyncComplete.DefaultSyncCompleteDataCollector, Unicorn" singleInstance="true" />
			</defaults>

			<!--
				The configuration provider wires up how the configuration(s) Unicorn is running are parsed.
				The default provider reads values from this config section.
			-->
			<configurationProvider type="Unicorn.Configuration.XmlConfigurationProvider, Unicorn"/>
		</unicorn>

		<settings>
			<!-- 
				Controls how many threads Unicorn can use when syncing or reserializing. 
				This value can be set to significantly higher than the number of CPU cores, as these are largely I/O bound.
				Use fewer threads for HDDs or slow SQL servers, and more threads for SSDs.
				For a SSD workload on a quad-core CPU 16 seems to be a decent number.
			-->
			<setting name="Unicorn.MaximumConcurrency" value="16" />
		</settings>
		<pipelines>
			<!-- Run before a configuration starts sync. Handlers should implement IUnicornSyncBeginProcessor -->
			<unicornSyncBegin>
				<processor type="Unicorn.Pipelines.UnicornSyncBegin.ResetSyncCompleteDataCollector, Unicorn" />
			</unicornSyncBegin>
			<!-- Run after a configuration completes sync. Handlers should implement IUnicornSyncCompleteProcessor -->
			<unicornSyncComplete>
				<processor type="Unicorn.Pipelines.UnicornSyncComplete.SyncCompleteLogger, Unicorn" />
			</unicornSyncComplete>
			<!-- Run after all configuration(s) complete sync. Handlers should implement IUnicornSyncEndProcessor -->
			<unicornSyncEnd>
				<processor type="Unicorn.Pipelines.UnicornSyncEnd.SendSerializationCompleteEvent, Unicorn" />
			</unicornSyncEnd>
		</pipelines>
	</sitecore>
</configuration>
